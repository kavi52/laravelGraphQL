type Query {
    # Get all users
    # users: [User!]! @all
    # {
    #   users {
    #     id,
    #     name
    #   }
    # }

    # Fetch single user
    user(id: ID @eq): User @find

    # {
    #   user(id:3){
    #     id,
    #     name
    #   }
    # }

    # Fetch paginate users
    users: [User!]! @paginate

    # {
    #   users(first:3, page:2){
    #       data{
    #           name,
    #           id
    #       },
    #        paginatorInfo {
    #           currentPage,
    #           hasMorePages,
    #           lastPage
    #       }
    #   }
    # }
}

type Mutation {
    createUser(name: String!, email: String, password: String!): User! @create
    # mutation {
    #   createUser(name: "Donald") {
    #       id
    #       name
    #    }
    # }

    updateUser(id: ID!, name: String): User @update
    # mutation {
    #   updateUser(id: "1", name: "patarji") {
    #     id
    #     name
    #   }
    # }

    deleteUser(id: ID!): User @delete
    #     mutation {
    #   deleteUser(id: "123") {
    #     secret
    #   }
    # }

    # Use the @upsert directive to update a model with a given id or create it if it does not exist.

    upsertUser(id: ID!, name: String!, email: String): User @upsert
    # mutation {
    #   upsertUser(id: "123", name: "Hillary") {
    #     id
    #     name
    #     email
    #   }
    # }
}

type User {
    id: ID
    name: String
    email_verified_at: String
    email: String
}
